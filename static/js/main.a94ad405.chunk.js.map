{"version":3,"sources":["components/AppNavbar.js","actions/itemActions.js","actions/types.js","components/ShoppingList.js","reducers/itemReducer.js","reducers/index.js","store.js","components/ItemModal.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","isOpen","toggle","setState","Navbar","color","dark","expand","className","Container","NavbarBrand","href","NavbarToggler","onClick","this","Collapse","navbar","Nav","NavItem","NavLink","Component","setItemsLoading","type","ShoppingList","onDeleteClick","id","props","deleteItem","getItems","items","item","ListGroup","TransitionGroup","map","_id","name","CSSTransition","key","timeout","classNames","ListGroupItem","Button","size","bind","protoTypes","PropTypes","func","isRequired","object","connect","dispatch","axios","get","then","res","payload","data","delete","initialState","loading","combineReducers","action","filter","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","ItemModal","modal","onChange","e","target","value","onSubmit","preventDefault","newItem","addItem","style","marginBottom","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","placeholder","marginTop","block","post","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mUAoCeA,E,2MAhCXC,MAAQ,CACJC,QAAQ,G,EAGZC,OAAS,WACL,EAAKC,SAAS,CACVF,QAAS,EAAKD,MAAMC,U,wEAKxB,OACI,6BACI,kBAACG,EAAA,EAAD,CAAQC,MAAM,OAAOC,MAAI,EAACC,OAAO,KAAKC,UAAU,QAC5C,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,iBACA,kBAACC,EAAA,EAAD,CAAeC,QAASC,KAAKZ,SAC7B,kBAACa,EAAA,EAAD,CAAUd,OAAQa,KAAKd,MAAMC,OAAQe,QAAM,GACvC,kBAACC,EAAA,EAAD,CAAKT,UAAU,UAAUQ,QAAM,GAC3B,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASR,KAAK,gCAAd,oB,GArBZS,a,0DC6BXC,EAAkB,WAC7B,MAAO,CACLC,KC/ByB,kB,gBCIvBC,E,2MAMFC,cAAgB,SAACC,GACb,EAAKC,MAAMC,WAAWF,I,mFAJtBX,KAAKY,MAAME,a,+BAOL,IAAD,OACEC,EAASf,KAAKY,MAAMI,KAApBD,MAEP,OACI,kBAACpB,EAAA,EAAD,KACI,kBAACsB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAiBxB,UAAU,iBACtBqB,EAAMI,KAAI,gBAAEC,EAAF,EAAEA,IAAKC,EAAP,EAAOA,KAAP,OACP,kBAACC,EAAA,EAAD,CAAeC,IAAKH,EAAKI,QAAS,IAAKC,WAAW,QAC9C,kBAACC,EAAA,EAAD,KAAe,kBAACC,EAAA,EAAD,CAAQjC,UAAU,aAAaH,MAAM,SAASqC,KAAK,KAAK7B,QAAS,EAAKW,cAAcmB,KAAK,EAAMT,IAA/F,QAAsHC,c,GAnB1If,aA6B3BG,EAAaqB,WAAa,CACtBhB,SAAUiB,IAAUC,KAAKC,WAEzBjB,KAAMe,IAAUG,OAAOD,YAG3B,IAIeE,eAJH,SAACjD,GAAD,MAAY,CACpB8B,KAAM9B,EAAM8B,QAGY,CAAEF,SF1CN,kBAAM,SAACsB,GAC7BA,EAAS7B,KACT8B,IACCC,IAAI,cACJC,MAAK,SAAAC,GAAG,OAAIJ,EAAS,CACpB5B,KCTqB,YDUrBiC,QAASD,EAAIE,YEoCuB7B,WFhCd,SAACF,GAAD,OAAQ,SAAAyB,GAChCC,IACCM,OADD,qBACsBhC,IACrB4B,MAAK,SAAAC,GAAG,OAAIJ,EAAS,CACpB5B,KChBuB,cDiBvBiC,QAAS9B,UE2BEwB,CAAuC1B,G,gCC5ChDmC,EAAe,CACnB7B,MAAO,GACP8B,SAAS,GCDIC,cAAgB,CAC3B9B,KDGW,WAAwC,IAA/B9B,EAA8B,uDAAtB0D,EAAcG,EAAQ,uCAClD,OAAOA,EAAOvC,MACV,IFTiB,YEUf,OAAO,eACAtB,EADP,CAEI6B,MAAOgC,EAAON,QACdI,SAAS,IAEf,IFbmB,cEcjB,OAAO,eACF3D,EADL,CAEE6B,MAAO7B,EAAM6B,MAAMiC,QAAO,SAAChC,GAAD,OAAUA,EAAKI,MAAQ2B,EAAON,aAE5D,IFnBgB,WEoBd,OAAO,eACFvD,EADL,CAEE6B,MAAM,CAAEgC,EAAON,SAAV,mBAAsBvD,EAAM6B,UAErC,IFtBqB,gBEuBnB,OAAO,eACF7B,EADL,CAEE2D,SAAS,IAEb,QACI,OAAO3D,MEzBb+D,EAAa,CAACC,KAWLC,EATDC,YACZC,EALmB,GAOnBC,YACEC,IAAe,WAAf,EAAmBN,GACnBO,OAAOC,8BAAgCD,OAAOC,iC,iECR5CC,E,2MACFxE,MAAQ,CACJyE,OAAO,EACPtC,KAAM,I,EAGVjC,OAAS,WACL,EAAKC,SAAS,CACVsE,OAAQ,EAAKzE,MAAMyE,S,EAI3BC,SAAW,SAACC,GACR,EAAKxE,SAAL,eAAiBwE,EAAEC,OAAOzC,KAAOwC,EAAEC,OAAOC,S,EAG9CC,SAAW,SAACH,GACRA,EAAEI,iBACF,IAAMC,EAAU,CACZ7C,KAAM,EAAKnC,MAAMmC,MAErB,EAAKT,MAAMuD,QAAQD,GACnB,EAAK9E,U,wEAIL,OACI,6BACI,kBAACuC,EAAA,EAAD,CAAQpC,MAAM,OAAO6E,MAAO,CAACC,aAAc,QAAStE,QAASC,KAAKZ,QAAlE,YACA,kBAACkF,EAAA,EAAD,CAAOnF,OAAQa,KAAKd,MAAMyE,MAAOvE,OAAQY,KAAKZ,QAC1C,kBAACmF,EAAA,EAAD,CAAanF,OAAQY,KAAKZ,QAA1B,wBACA,kBAACoF,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMT,SAAUhE,KAAKgE,UACjB,kBAACU,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,QAAX,QACA,kBAACC,EAAA,EAAD,CAAOrE,KAAK,OAAOa,KAAK,OAAOV,GAAG,OAAOmE,YAAY,oBAAoBlB,SAAU5D,KAAK4D,WACxF,kBAACjC,EAAA,EAAD,CAAQpC,MAAM,OAAO6E,MAAO,CAACW,UAAW,QAASC,OAAK,GAAtD,qB,GApCR1E,aAkDT6B,eAJH,SAACjD,GAAD,MAAY,CACpB8B,KAAM9B,EAAM8B,QAGY,CAAEmD,QNhCP,SAAAnD,GAAI,OAAI,SAAAoB,GAC7BC,IACC4C,KAAK,aAAcjE,GACnBuB,MAAK,SAAAC,GAAG,OAAIJ,EAAS,CACpB5B,KC1BoB,WD2BpBiC,QAASD,EAAIE,aM2BFP,CAA0BuB,GC/B1BwB,MAdf,WACE,OACE,kBAAC,IAAD,CAAU/B,MAAOA,GACf,yBAAKzD,UAAU,OACb,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,UCLUwF,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a94ad405.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink, Container} from 'reactstrap';\n\nclass AppNavbar extends Component {\n    state = {\n        isOpen: false\n    }\n\n    toggle = () => {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    render() {\n        return(\n            <div>\n                <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\n                    <Container>\n                        <NavbarBrand href=\"/\">Shopping List</NavbarBrand>\n                        <NavbarToggler onClick={this.toggle}/>\n                        <Collapse isOpen={this.state.isOpen} navbar>\n                            <Nav className=\"ml-auto\" navbar>\n                                <NavItem>\n                                    <NavLink href=\"https://github.com/jenn-jenn\">Github</NavLink>\n                                </NavItem>\n                            </Nav>\n                        </Collapse>\n                    </Container>\n                </Navbar>\n            </div>\n        )\n    }\n\n}\n\nexport default AppNavbar;","import axios from 'axios';\nimport { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING} from \"./types\";\n\n\nexport const getItems = () => (dispatch) => {\n  dispatch(setItemsLoading());\n  axios\n  .get('/api/items')\n  .then(res => dispatch({\n    type: GET_ITEMS,\n    payload: res.data\n  }))\n};\n\nexport const deleteItem = (id) => dispatch => {\n  axios\n  .delete(`/api/items/${id}`)\n  .then(res => dispatch({\n    type: DELETE_ITEM,\n    payload: id\n  }))\n};\n\nexport const addItem = item => dispatch => {\n  axios\n  .post('/api/items', item)\n  .then(res => dispatch({\n    type: ADD_ITEM,\n    payload: res.data\n  }))\n};\n\nexport const setItemsLoading = () => {\n  return {\n    type: ITEMS_LOADING\n  }\n}\n","export const GET_ITEMS = \"GET_ITEMS\";\nexport const ADD_ITEM = \"ADD_ITEM\";\nexport const DELETE_ITEM = \"DELETE_ITEM\";\nexport const ITEMS_LOADING = \"ITEMS_LOADING\";\n","import React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux';\nimport { getItems, deleteItem } from '../actions/itemActions';\nimport PropTypes from 'prop-types';\n\nclass ShoppingList extends Component {\n\n    componentDidMount() {\n        this.props.getItems();\n    }\n\n    onDeleteClick = (id) => {\n        this.props.deleteItem(id);\n    }\n\n    render() {\n        const {items} = this.props.item;\n\n        return (\n            <Container>\n                <ListGroup>\n                    <TransitionGroup className=\"shopping-list\">\n                        {items.map(({_id, name}) => (\n                            <CSSTransition key={_id} timeout={500} classNames=\"fade\">\n                                <ListGroupItem><Button className=\"remove-btn\" color=\"danger\" size=\"sm\" onClick={this.onDeleteClick.bind(this, _id)}>&times;</Button>{name}</ListGroupItem>\n                            </CSSTransition>\n                        ))}\n                    </TransitionGroup>\n                </ListGroup>\n            </Container>\n        )\n    }\n}\n\nShoppingList.protoTypes = {\n    getItems: PropTypes.func.isRequired,\n    // deleteItem: PropTypes.func.isRequired,\n    item: PropTypes.object.isRequired\n}\n\nconst msp = (state) => ({\n    item: state.item\n})\n\nexport default connect(msp, { getItems, deleteItem })(ShoppingList);","import { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from '../actions/types';\n\nconst initialState = {\n  items: [],\n  loading: false\n};\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case GET_ITEMS:\n          return {\n              ...state,\n              items: action.payload,\n              loading: false\n          };\n        case DELETE_ITEM:\n          return {\n            ...state,\n            items: state.items.filter((item) => item._id !== action.payload)\n          };\n        case ADD_ITEM:\n          return {\n            ...state,\n            items: [action.payload, ...state.items]\n          }\n        case ITEMS_LOADING:\n          return {\n            ...state,\n            loading: true\n          }\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport itemReducer from './itemReducer';\n\nexport default combineReducers({\n    item: itemReducer\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nexport default store;","import React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input } from 'reactstrap'\nimport { connect } from 'react-redux';\nimport { addItem } from '../actions/itemActions';\n\nclass ItemModal extends Component {\n    state = {\n        modal: false,\n        name: ''\n    }\n\n    toggle = () => {\n        this.setState({\n            modal: !this.state.modal\n        })\n    }\n\n    onChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        const newItem = {\n            name: this.state.name\n        }\n        this.props.addItem(newItem);\n        this.toggle();\n    }\n\n    render() {\n        return (\n            <div>\n                <Button color=\"dark\" style={{marginBottom: '2rem'}} onClick={this.toggle}>Add Item</Button>\n                <Modal isOpen={this.state.modal} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle}>Add to Shopping List</ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit={this.onSubmit}>\n                            <FormGroup>\n                                <Label for=\"item\">Item</Label>\n                                <Input type=\"text\" name=\"name\" id=\"item\" placeholder=\"Add shopping item\" onChange={this.onChange} />\n                                <Button color=\"dark\" style={{marginTop: '2rem'}} block>Add Item</Button>\n                            </FormGroup>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nconst msp = (state) => ({\n    item: state.item\n})\n\nexport default connect(msp, { addItem })(ItemModal);","import React from 'react';\nimport { Provider } from 'react-redux';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport AppNavbar from './components/AppNavbar'\nimport ShoppingList from './components/ShoppingList';\nimport store from './store';\nimport { Container } from 'reactstrap';\nimport ItemModal from './components/ItemModal';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <AppNavbar />\n        <Container>\n          <ItemModal />\n          <ShoppingList />\n        </Container>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}